#!/bin/bash

# BEGIN first-assignment.pbs

# =========================================== #
#                   PBS SETUP                 #
# =========================================== #

# Job name
#PBS -N second-assignment-testing
# Output files
#PBS -o ./out.txt
#PBS -e ./error.txt
# Queue name
#PBS -q short_cpuQ
# Set the maximum wall time
#PBS -l walltime=0:02:00
# Number of nodes, cpus, and amount of memory
#PBS -l select=2:ncpus=64:mem=4G

NUM_ITERATIONS=100
BUILD_DIR=./build
OUTPUT_DIR=./benchmarks/plotting/reports
# Load the necessary modules
module load gcc91
module load cmake-3.15.4
module load mpich-3.2.1--gcc-9.1.0
# Select the working directory
cd $HOME/parallel-computing-cpp/

# =========================================== #
#               BUILD THE TARGETS             #
#                                             #
#  Each executable contains all the necessary #
#     benchmarks. Three executables will be   #
#         generated: test, test_opt and       #
#       test_opt_aggressive based on the      #
# optimization level enabled in the compiler. #
# =========================================== #

if [ -d ./$BUILD_DIR ]; then
    rm -rf ./$BUILD_DIR/
fi    
cmake \
     -B $BUILD_DIR

if [ ! -d ./$BUILD_DIR ]; then
    echo "Build directory was not created" 
    exit 1
fi    

cmake --build $BUILD_DIR -j$(nproc)

if [ ! -f ./$BUILD_DIR/tests ]; then
    echo "Target tests not found" 
    exit 1
fi

# =========================================== #
#            GENERATE THE INFO FILE           #
#                                             #
#   This file contains information about the  #
#   system such as atchitecture, memory and   #
#                kernel version.              #
# =========================================== #

if [ -d $OUTOUT_DIR ]; then
    # Remove old output
    rm $OUTPUT_DIR/* || :
fi
if [ ! -d $OUTPUT_DIR ]; then
    mkdir $OUTPUT_DIR
fi


# =========================================== #
#                 RUN THE TESTS               #
#                                             #
#              Patience is advised            #
# =========================================== #

if [ -d $BUILD_DIR ]; then
    if [ -f $BUILD_DIR/tests ]; then
        echo "Running regular benchmarks with 2 processes..."
        mpirun -np 1 ./$BUILD_DIR/tests \
               --verbose \
	       --no-multithread \
		: -np 1 ./build/worker
        echo "Running regular benchmarks with 4 processes..."
        mpirun -np 1 ./$BUILD_DIR/tests \
               --verbose \
	       --no-multithread \
		: -np 3 ./build/worker
        echo "Running regular benchmarks with 8 processes..."
        mpirun -np 1 ./$BUILD_DIR/tests \
               --verbose \
	       --no-multithread \
		: -np 7 ./build/worker
    fi
    if [ -f $BUILD_DIR/tests_opt_o1 ]; then
        echo "Running optimized benchmarks -01..."
        mpirun -np 1 ./$BUILD_DIR/tests_opt_o1 \
               --verbose \
	       --no-multithread \
		: -np 1 ./build/worker_opt_o1
    fi
    if [ -f $BUILD_DIR/tests_opt_o2 ]; then
        echo "Running optimized benchmarks -02 ..."
        mpirun -np 1 ./$BUILD_DIR/tests_opt_o2 \
               --verbose \
	       --no-multithread \
		: -np 1 ./build/worker_opt_o2
    fi
    if [ -f $BUILD_DIR/tests_opt_o3 ]; then
        echo "Running optimized benchmarks -03..."
        mpirun -np 1 ./$BUILD_DIR/tests_opt_o3 \
               --verbose \
	       --no-multithread \
		: -np 1 ./build/worker_opt_o3
    fi
else
    echo "Please run the build script first"
fi

# END first-assignment.pbs
